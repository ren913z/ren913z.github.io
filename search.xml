<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MySQL数据库-02</title>
    <url>/2023/05/05/MySQL-02/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>数据库</category>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建博客遇见的问题</title>
    <url>/2023/05/06/blog_question/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一-hexo安装失败，提示无权限"><a href="#一-hexo安装失败，提示无权限" class="headerlink" title="(一)hexo安装失败，提示无权限"></a>(一)hexo安装失败，提示无权限</h2><p>输入下列命令行安装hexo模块时，提示如下图所示的报错。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm insatll -g hexo-cli</span><br></pre></td></tr></table></figure>
<p><img src="/2023/05/06/blog_question/hexo安装失败，提示无权限.png" alt></p>
<p><strong>解决办法：</strong></p>
<p>找到node.js的安装目录，设置其文件目录的权限为完全控制。</p>
<p><img src="/2023/05/06/blog_question/解决1.png" alt></p>
<h2 id="二-写md文章时图片正常，上传博客后，图片不显示"><a href="#二-写md文章时图片正常，上传博客后，图片不显示" class="headerlink" title="(二)写md文章时图片正常，上传博客后，图片不显示"></a>(二)写md文章时图片正常，上传博客后，图片不显示</h2><p>最近刚开始搭建hexo博客，遇到了图片部署后不显示的问题，如图：</p>
<p><img src="/2023/05/06/blog_question/图片不显示.png" alt></p>
<p><strong>解决办法：</strong></p>
<ol>
<li>先使用<code>git bash</code>安装<code>hexo-asset-image</code>插件：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/7ym0n/hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<ol>
<li>在根目录下配置文件<code>_config.yml</code> 中有 <code>post_asset_folder:false改为true</code>。这样在建立文件时，<code>Hexo</code>会自动建立一个与文章同名的文件夹，这样就可以把与该文章相关的所有资源（图片）都放到那个文件夹里方便后面引用。例如，我建立一个<code>test</code>文章页面，然后引用<code>test.jpg</code>图片。</li>
</ol>
<ul>
<li>先用如下命令生成一个<code>test</code>文章页面，以后写文章建议都这样生成。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new test //生成一个新的文章页面</span><br></pre></td></tr></table></figure>
<p><img src="/2023/05/06/blog_question/建立测试文章页.png" alt></p>
<ul>
<li>如图所示，生成了一个<code>test.md</code>文件的同名文件夹<code>test</code></li>
</ul>
<p><img src="/2023/05/06/blog_question/建立出来的文章页.png" alt></p>
<ul>
<li>把图片放到<code>test.md</code>文件的同名文件夹<code>test</code>里，最后在<code>test.md</code>文件中用如下引用方式引用图片，其中<code>test.jpg</code>就是你要引用的图片，我这里就是<code>test.jpg</code>，后面的This is an test image是图片描述，可以自己修改。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![This is an test image]（./test/test.jpg）</span><br><span class="line">//注意!!!这里目录的斜杠必须是正斜杠(&#x27;/&#x27;)，不然部署到github上识别不出来</span><br></pre></td></tr></table></figure>
<p><img src="/2023/05/06/blog_question/将引用写入md文件.png" alt></p>
<p>这样就能成功显示了</p>
]]></content>
      <categories>
        <category>博客搭建遇见的问题</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML</title>
    <url>/2023/04/25/html/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>俗话说：程序猿不一定会搞安全，但是搞安全的一定会懂一点代码。</p>
<p>今天我们就来聊一聊前端最基础的<strong>HTML</strong>。</p>
<p>超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。您可以使用 HTML 来建立自己的 WEB 站点，HTML 运行在浏览器上，由浏览器来解析。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如图所示，HTML页面的是由“声明”、“头部元素”以及“可见的页面内容”构成的<br><img src=".source/images/html_1/1.jpg" alt="html结构图"></p>
<h2 id="lt-DOCTYPE-gt-声明"><a href="#lt-DOCTYPE-gt-声明" class="headerlink" title="&lt;!DOCTYPE&gt;声明"></a>&lt;!DOCTYPE&gt;声明</h2><p>&lt;!DOCTYPE&gt;声明有助于浏览器中正确显示网页。<br>网络上有很多不同的文件，如果能够正确声明HTML的版本，浏览器就能正确显示网页内容。<br>doctype 声明是不区分大小写的，以下方式均可：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!Doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!Doctype <span class="keyword">Html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="HTML-lt-head-gt-元素"><a href="#HTML-lt-head-gt-元素" class="headerlink" title="HTML &lt;head&gt; 元素"></a>HTML <code>&lt;head&gt;</code> 元素</h2><p>元素包含了所有的头部标签元素。在 <code>&lt;head&gt;</code>元素中你可以插入脚本（scripts）, 样式文件（CSS），及各种meta信息。<br>可以添加在头部区域的元素标签为: <code>&lt;title&gt;</code>, <code>&lt;style&gt;</code>, <code>&lt;meta&gt;</code>, <link>, <script>,<noscript> 和 <base>。</p>
<p><h2>HTML &lt;body&gt; 元素</h2></p>
<p><body> </body>之间写入网页需要展示的内容。<br>可以添加各种元素标签,例如：</p>
<ul>
<li>盒子（便于更改css样式）：<div></li>
<li>段落标签：<p></li>
<li>1-6级标题：<h1>,<h2>,<h3>,<h4>,<h5>,<h6></li>
<li>按钮：<button></li>
<li>文本框：<input><br>….</li>
</ul>
</script></p>]]></content>
      <categories>
        <category>代码基础</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库-01</title>
    <url>/2023/05/05/MySQL-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="（一）为什么网络安全要学数据库"><a href="#（一）为什么网络安全要学数据库" class="headerlink" title="（一）为什么网络安全要学数据库"></a>（一）为什么网络安全要学数据库</h2><p>数据库 ：  数据存储的仓库——&gt;装数据用的<br>利用之前所学的知识，将数据存储到数据库中，实现一些web相关的功能<br><strong>一个重点，SQL注入</strong></p>
<p><strong>思考一下：电脑为什么能够登录？</strong></p>
<ol>
<li>需要创建用户，   设置密码——&gt; .XML（配置文件）</li>
<li>我们登陆的时候输入用户名，密码——&gt;数据库的读取，看看输入的数据和数据库内是否匹配</li>
<li>每天都会登录   ，登录  ，登出——&gt;数据库的操作。</li>
</ol>
<p>每天就会产生很多的数据，这些数据我们怎么处理，——&gt;交给数据库来进行管理<br>例如：京东的仓库：</p>
<ul>
<li>不同省份——&gt;不同的仓库——&gt;数据库（database）</li>
<li>仓库里面是不是有不同的分区（生活区、电子娱乐区、酒水饮料、）——&gt;表(table) </li>
<li>每个分区里面还会有货架，货架里面还有分层——&gt;行(row)</li>
<li>每一行里面装了货物——&gt;数据（data）</li>
</ul>
<p>总结：数据库就是一个大型的管理系统，管理我们存放的数据</p>
<h2 id="（二）关系型数据库和非关系型数据库"><a href="#（二）关系型数据库和非关系型数据库" class="headerlink" title="（二）关系型数据库和非关系型数据库"></a>（二）关系型数据库和非关系型数据库</h2><h3 id="2-1-关系型数据库"><a href="#2-1-关系型数据库" class="headerlink" title="2.1 关系型数据库"></a>2.1 关系型数据库</h3><p>MySQL——&gt;所以我们可以通过找到information_schema.schemata，tables，colunms<br>关系型数据库就是数据有关联的</p>
<ul>
<li><strong>优点</strong></li>
</ul>
<ol>
<li>都是使用表结构，格式一致，易于维护。</li>
<li>使用通用的 SQL 语言操作，使用方便，可用于复杂查询。</li>
<li>数据存储在磁盘中，安全。</li>
</ol>
<ul>
<li><strong>缺点</strong></li>
</ul>
<ol>
<li>读写性能比较差，不能满足海量数据的高效率读写。</li>
<li>不节省空间。因为建立在关系模型上，就要遵循某些规则，比如数据中某字段值即使为空仍要分配空间。</li>
<li>固定的表结构，灵活度较低。</li>
</ol>
<h3 id="2-2-非关系型数据库："><a href="#2-2-非关系型数据库：" class="headerlink" title="2.2 非关系型数据库："></a>2.2 非关系型数据库：</h3><p>数据存储在内存中       </p>
<ul>
<li>redis  （SSRF漏洞的时候需要掌握）</li>
<li>memcached(缓存)</li>
<li>mongodb(文档型数据库)</li>
</ul>
<p>例如我们班上所有人同时请求jd.com——&gt;发送了数据包()，对方服务器执行查询语句，查询之后返回数据<br>redis——&gt;中间缓存件——&gt;a()——&gt;redis——&gt;mysql </p>
<h2 id="（三）SQL-结构化查询语言"><a href="#（三）SQL-结构化查询语言" class="headerlink" title="（三）SQL:结构化查询语言"></a>（三）SQL:结构化查询语言</h2><p>SQL它是所有数据库查询语言的统称<br>操作：写数据库、增删改查</p>
<h3 id="3-1-增删改查（基础查询）"><a href="#3-1-增删改查（基础查询）" class="headerlink" title="3.1 增删改查（基础查询）"></a>3.1 增删改查（基础查询）</h3><p>操作数据库的核心思想<br>建库——&gt;建表——&gt;执行数据的增删改查</p>
<h3 id="3-2-DDL-数据的定义语言"><a href="#3-2-DDL-数据的定义语言" class="headerlink" title="3.2 DDL:数据的定义语言"></a>3.2 DDL:数据的定义语言</h3><p>data define language<br>用于建库、建表、修改表结构、删除库、删除表</p>
<h3 id="3-3-DML-数据管理语言"><a href="#3-3-DML-数据管理语言" class="headerlink" title="3.3 DML:数据管理语言"></a>3.3 DML:数据管理语言</h3><p>data manager language<br>数据的增删改</p>
<h3 id="3-4-DQL-数据的查询语言"><a href="#3-4-DQL-数据的查询语言" class="headerlink" title="3.4 DQL:数据的查询语言"></a>3.4 DQL:数据的查询语言</h3><p>data query language<br>数据的查询</p>
<h3 id="3-5-DCL-数据控制语言"><a href="#3-5-DCL-数据控制语言" class="headerlink" title="3.5 DCL:数据控制语言"></a>3.5 DCL:数据控制语言</h3><p>data control language<br>数据库的权限管理</p>
<h2 id="（四）一些数据库的操作："><a href="#（四）一些数据库的操作：" class="headerlink" title="（四）一些数据库的操作："></a>（四）一些数据库的操作：</h2><h3 id="4-1-创建数据库"><a href="#4-1-创建数据库" class="headerlink" title="4.1 创建数据库"></a>4.1 创建数据库</h3><p>（1）展示所有的数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure>
<p>（2）建立数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database 数据库名字；</span><br></pre></td></tr></table></figure>
<h3 id="4-2-删除数据库"><a href="#4-2-删除数据库" class="headerlink" title="4.2 删除数据库"></a>4.2 删除数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> database 数据库的名字;</span><br></pre></td></tr></table></figure>
<h3 id="4-3-标准的建立数据库和删除数据库"><a href="#4-3-标准的建立数据库和删除数据库" class="headerlink" title="4.3 标准的建立数据库和删除数据库"></a>4.3 标准的建立数据库和删除数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> 数据库的名字;</span><br><span class="line"><span class="keyword">drop</span> database if <span class="keyword">exists</span> 数据库的名字;</span><br></pre></td></tr></table></figure>
<h2 id="（五）MySQL数据类型："><a href="#（五）MySQL数据类型：" class="headerlink" title="（五）MySQL数据类型："></a>（五）MySQL数据类型：</h2><h3 id="5-1-数值型："><a href="#5-1-数值型：" class="headerlink" title="5.1 数值型："></a>5.1 数值型：</h3><h4 id="5-1-1-整型："><a href="#5-1-1-整型：" class="headerlink" title="5.1.1 整型："></a>5.1.1 整型：</h4><ul>
<li>很小的整数   TINYINT     1个字节</li>
<li>小的整数    SMALLINT    2个字节</li>
<li>中等的整数  MEDIUMINT   3个字节</li>
<li>普通的整数   (INTEGHR)INT   4个字节<em>*</em></li>
<li>大整数      BIGINT      8个字节</li>
</ul>
<h4 id="5-1-2-浮点型（小数）"><a href="#5-1-2-浮点型（小数）" class="headerlink" title="5.1.2 浮点型（小数）"></a>5.1.2 浮点型（小数）</h4><ul>
<li>单精度浮点数       FLOAT    4个字节<em>*</em></li>
<li>双精度浮点数        DOUBLE  8个字节<em>*</em></li>
<li>压缩的“严格”定点数  DECIMAL(M,D)  DEC   M+2个字节（银行用DECIMAL ）</li>
</ul>
<h4 id="5-1-3-日期类型："><a href="#5-1-3-日期类型：" class="headerlink" title="5.1.3 日期类型："></a>5.1.3 日期类型：</h4><ul>
<li>年  year  YYYY     1个字节</li>
<li>时间 time  HH:MM:SS  3个字节</li>
<li>日期 date  YYYY-MM-DD 2012-01-01  3个字节</li>
<li>详细日期  datetime YYYY-MM-DD HH:MM:SS 8个字节<em>*</em></li>
<li>超级详细日期  timestamp  YYYY-MM-DD HH:MM:SS 1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC  4个字节</li>
</ul>
<h3 id="5-2-字符串"><a href="#5-2-字符串" class="headerlink" title="5.2 字符串"></a>5.2 字符串</h3><div class="table-container">
<table>
<thead>
<tr>
<th>数据类型</th>
<th>长度</th>
<th>字节数</th>
</tr>
</thead>
<tbody>
<tr>
<td>CHAR(M)</td>
<td>固定长度的非二进制字符串</td>
<td>M字节，1&lt;=M&lt;=255</td>
</tr>
<tr>
<td>VARCHAR(M)</td>
<td>变长的非二进制字符串</td>
<td>L+1字节，L&lt;=M 和 1&lt;= M &lt;=255</td>
</tr>
<tr>
<td>TINYTEXT</td>
<td>非常小的非二进制字符串</td>
<td>L+1字节，L&lt;2^8=256</td>
</tr>
<tr>
<td>TEXT</td>
<td>……</td>
<td>L+2字节,L&lt;2^16</td>
</tr>
<tr>
<td>MEDIUMTEXT</td>
<td>……</td>
<td>L+3字节,L&lt;2^24</td>
</tr>
<tr>
<td>LONGTEXT</td>
<td>……</td>
<td>L+4字节,L&lt;2^32</td>
</tr>
<tr>
<td>ENUM</td>
<td>枚举类型，只能有一个枚举字符串</td>
<td>1或者2个字节，取决于枚举的数目（最大是65535）</td>
</tr>
<tr>
<td>SET</td>
<td>一个设置，字符串对象可以有0个或者是多个SET成员</td>
<td>1 2 3 4 8字节，取决于成员的数量</td>
</tr>
</tbody>
</table>
</div>
<h3 id="5-3-二进制"><a href="#5-3-二进制" class="headerlink" title="5.3 二进制"></a>5.3 二进制</h3><p>现在基本上不用二进制，如果用二进制存放数据，数据转移非常困难，查询也很费时间，并且数据库会很大，很吃硬盘。</p>
<h2 id="（六）约束"><a href="#（六）约束" class="headerlink" title="（六）约束"></a>（六）约束</h2><p>保证数据的一个完整性，约束数据</p>
<h3 id="6-1-主键约束-primary-key"><a href="#6-1-主键约束-primary-key" class="headerlink" title="6.1 主键约束(primary key)"></a>6.1 主键约束(primary key)</h3><p>有点像JS中的id，他是唯一的，唯一的标识。理论上来说每一个数据表都必须有一个唯一主键作为数据的唯一标识，设置主键的列不允许为空，主键习惯 id 表示，可以在创建数据时直接指定，也可以通过修改表结构直接添加，设置为主键的列在添加数据时不能重复，既唯一性。</p>
<h3 id="6-2-唯一约束-unique"><a href="#6-2-唯一约束-unique" class="headerlink" title="6.2 唯一约束(unique )"></a>6.2 唯一约束(unique )</h3><p>唯一约束用来保护表中某列数据不允许重复，与主键约束类似，但级别没有主键高。一份表中唯一约束可以创建多个，并且唯一约束的列允许为空。注意varchar长度为255时，无法设置唯一约束。唯一约束一般用于约束身份证号码、QQ号、手机号、微信号、邮箱号…..</p>
<h3 id="6-3-非空约束-not-null"><a href="#6-3-非空约束-not-null" class="headerlink" title="6.3 非空约束(not null)"></a>6.3 非空约束(not null)</h3><p>可以通过 not null 设置数据表中某一列是必填字段，即该数据不能为空，必须写入该数据，一般用于用户名、密码、手机号…..</p>
<h3 id="6-4-默认-default"><a href="#6-4-默认-default" class="headerlink" title="6.4 默认(default)"></a>6.4 默认(default)</h3><p>可以通过default设置默认值约束，设置了默认约束的列，如果不给值就会使用默认值来填充。一般出现在性别(gender,sex)  比如说默认：男性。</p>
<h3 id="6-5-外键约束-foreign-key"><a href="#6-5-外键约束-foreign-key" class="headerlink" title="6.5 外键约束(foreign key)"></a>6.5 外键约束(foreign key)</h3><p>外键用来让两个表的数据之间建立连接，保证数据的一致性和完整性。</p>
<h3 id="6-6-检查约束"><a href="#6-6-检查约束" class="headerlink" title="6.6 检查约束"></a>6.6 检查约束</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 年龄 必须是 <span class="number">12</span><span class="operator">~</span><span class="number">20</span></span><br><span class="line"># MySQL中有<span class="keyword">check</span>约束 但是不起作用</span><br><span class="line"><span class="keyword">check</span></span><br></pre></td></tr></table></figure>
<h2 id="（七）建表！！！"><a href="#（七）建表！！！" class="headerlink" title="（七）建表！！！"></a>（七）建表！！！</h2><p>（1）建立数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database 数据库名;</span><br></pre></td></tr></table></figure>
<p>（2）进入数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure>
<p>（3）先查看这个数据库中所有表的信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure>
<p>（4）建表的模板</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">    字段名<span class="number">1</span>  数据类型  约束条件,</span><br><span class="line">    字段名<span class="number">2</span>  数据类型  约束条件,</span><br><span class="line">    字段名<span class="number">3</span>  数据类型  约束条件,</span><br><span class="line">    字段名<span class="number">4</span>  数据类型  约束条件,</span><br><span class="line">    字段名<span class="number">5</span>  数据类型  约束条件,</span><br><span class="line">)[engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8];</span><br></pre></td></tr></table></figure>
<p>（5）查看表的结构</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">desc</span> 表名;</span><br></pre></td></tr></table></figure>
<p>（6）查看创建的语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure>
<h2 id="（八）修改表的结构"><a href="#（八）修改表的结构" class="headerlink" title="（八）修改表的结构"></a>（八）修改表的结构</h2><p>在DDL里面中有一些关键字：</p>
<ul>
<li>增加：create / add</li>
<li>删除：drop</li>
<li>修改：alter/change/modify/rename</li>
</ul>
<p>（1）添加列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">column</span> 列名 类型</span><br></pre></td></tr></table></figure>
<p>（2）修改列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change <span class="keyword">column</span> 旧列名 新列名 新列类型</span><br></pre></td></tr></table></figure>
<p>（3）修改数据类型</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify <span class="keyword">column</span> 列名 类型</span><br></pre></td></tr></table></figure>
<p>（4）删除列名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">column</span> 列名</span><br></pre></td></tr></table></figure>
<p>（5）修改表名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 rename <span class="keyword">to</span> 新表名</span><br></pre></td></tr></table></figure>
<p>（6）删除表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure>
<h2 id="（九）增删改"><a href="#（九）增删改" class="headerlink" title="（九）增删改"></a>（九）增删改</h2><p>（1）增加数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名（字段名<span class="number">1</span>，字段名<span class="number">2</span>，....） <span class="keyword">values</span>（值<span class="number">1</span>，值<span class="number">2</span>，....）</span><br></pre></td></tr></table></figure>
<p>（2）删除数据</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 [<span class="built_in">where</span> 条件]</span><br></pre></td></tr></table></figure>
<ul>
<li>逻辑删除  （is_deleted）</li>
</ul>
<p>数据库里面的删除一般用delete直接将数据删除掉，但是在目前这种互联网时代，数据是最重要的，很多时候在业务里面，我们是不会去直接将数据删除的， 而是要将数据保留下来，以备后续的数据分析、溯源，这种情况就不能直接删除，而是逻辑删除，我们需要将这条数据加一个状态字段（is_deleted 默认值 0） ， 如果这个状态字段is_deleted = 1，那么就表示这个数据被删除了。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_bus <span class="keyword">where</span> is_deleted<span class="operator">=</span><span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<ol>
<li>修改数据</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 字段名<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>,字段名<span class="number">2</span><span class="operator">=</span>值<span class="number">2</span>,....... [<span class="keyword">where</span> 条件]</span><br></pre></td></tr></table></figure>
<h2 id="（十）查询"><a href="#（十）查询" class="headerlink" title="（十）查询"></a>（十）查询</h2><p>SQL语句的查询大概有：投影查询、限制查询、条件查询、模糊查询、排序查询，SQL查询语句的最基础语法为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure>
<h3 id="10-1-投影查询"><a href="#10-1-投影查询" class="headerlink" title="10.1 投影查询"></a>10.1 投影查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名<span class="number">1</span>，字段名<span class="number">2</span>，... <span class="keyword">from</span> 表；</span><br></pre></td></tr></table></figure>
<h3 id="10-2-限制查询（limit）"><a href="#10-2-限制查询（limit）" class="headerlink" title="10.2 限制查询（limit）"></a>10.2 限制查询（limit）</h3><h4 id="10-2-1-限制条数："><a href="#10-2-1-限制条数：" class="headerlink" title="10.2.1 限制条数："></a>10.2.1 限制条数：</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 limit n；(n表示查询的条数)</span><br></pre></td></tr></table></figure>
<h4 id="10-2-2-分段查询："><a href="#10-2-2-分段查询：" class="headerlink" title="10.2.2 分段查询："></a>10.2.2 分段查询：</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 limit a，b；(a表示开始查询的位置,b表示查询的条数)</span><br></pre></td></tr></table></figure>
<h3 id="10-3-条件查询："><a href="#10-3-条件查询：" class="headerlink" title="10.3 条件查询："></a>10.3 条件查询：</h3><h4 id="10-3-1-单个条件："><a href="#10-3-1-单个条件：" class="headerlink" title="10.3.1 单个条件："></a>10.3.1 单个条件：</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件；</span><br></pre></td></tr></table></figure>
<h4 id="10-3-2-多个条件-amp-amp-！（and-or-not）："><a href="#10-3-2-多个条件-amp-amp-！（and-or-not）：" class="headerlink" title="10.3.2 多个条件 &amp;&amp; || ！（and or not）："></a>10.3.2 多个条件 &amp;&amp; || ！（and or not）：</h4><ul>
<li>不等于符号：<code>!=</code>和<code>&lt;&gt;</code>，两种符号在SQL中都是不等于的意思</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件<span class="number">1</span> <span class="keyword">and</span> 条件<span class="number">2</span>；                        <span class="operator">/</span><span class="operator">/</span><span class="keyword">and</span>的用法</span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件<span class="number">1</span> <span class="keyword">or</span> 条件<span class="number">2</span>；                         <span class="operator">/</span><span class="operator">/</span><span class="keyword">or</span>的用法</span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段名<span class="number">1</span> <span class="operator">!=</span> &quot;xxx&quot; <span class="keyword">and</span> 字段名<span class="number">2</span> <span class="operator">!=</span> &quot;xxx&quot; ；  <span class="operator">/</span><span class="operator">/</span><span class="keyword">not</span>的用法</span><br></pre></td></tr></table></figure>
<p>例：判断年龄不等于25岁,三种判断不等于的方式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> age <span class="operator">!=</span> <span class="number">25</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> age <span class="operator">&lt;&gt;</span> <span class="number">25</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> <span class="keyword">not</span> age <span class="operator">=</span> <span class="number">25</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>比较符号：<code>&gt;</code>,<code>&gt;=</code>,<code>&lt;</code>,<code>&lt;=</code></li>
</ul>
<p>例：判断name是否（不）为空：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> name <span class="keyword">is</span> <span class="keyword">null</span>；</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> name <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>；</span><br></pre></td></tr></table></figure>
<p>例：判断年龄是否（不）在25到35岁之间</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> age <span class="keyword">in</span> (<span class="number">25</span>,<span class="number">35</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> age <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">25</span>,<span class="number">35</span>);</span><br></pre></td></tr></table></figure>
<p>例：找到名字、性别从table表中判断年龄大于35只查询一条</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name,gender <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">35</span> limit <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h3 id="10-4-模糊查询（关键字：like-）"><a href="#10-4-模糊查询（关键字：like-）" class="headerlink" title="10.4 模糊查询（关键字：like,%,_）"></a>10.4 模糊查询（关键字：<code>like</code>,<code>%</code>,<code>_</code>）</h3><p>%是MySQL里面最常用的通配符他能够代表任何长度得到字符串，并且这个字符串可以为0。比如说a%，以a开头的任意长度字符串，%b表示以结尾的任意长度字符串。</p>
<h4 id="10-4-1-全模糊"><a href="#10-4-1-全模糊" class="headerlink" title="10.4.1 全模糊"></a>10.4.1 全模糊</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> name <span class="keyword">like</span> “<span class="operator">%</span>k<span class="operator">%</span>”；</span><br></pre></td></tr></table></figure>
<h4 id="10-4-2-半模糊"><a href="#10-4-2-半模糊" class="headerlink" title="10.4.2 半模糊"></a>10.4.2 半模糊</h4><ul>
<li>从什么时候开始（like “条件值%”）</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> name <span class="keyword">like</span> “k<span class="operator">%</span>”；</span><br></pre></td></tr></table></figure>
<ul>
<li>从什么时候结束（like “%条件值”）</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> name <span class="keyword">like</span> “<span class="operator">%</span>k”；</span><br></pre></td></tr></table></figure>
<p>占位符（_）</p>
<p>例：查询以j开头的总共四个字符长度的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> name <span class="keyword">like</span> “j___<span class="operator">%</span>”；</span><br></pre></td></tr></table></figure>
<p>查询到的结果jack      jfds      jered      jfdsaa     jfdsafj     cxzdfj</p>
<p>只能查询到jack     jfds</p>
<h3 id="10-5-排序查询（SQL注入用的比较多）"><a href="#10-5-排序查询（SQL注入用的比较多）" class="headerlink" title="10.5 排序查询（SQL注入用的比较多）"></a>10.5 排序查询（SQL注入用的比较多）</h3><p>语法关键字：<code>order by 字段名 ASC/DESC</code></p>
<h4 id="10-5-1-单字段排序"><a href="#10-5-1-单字段排序" class="headerlink" title="10.5.1 单字段排序"></a>10.5.1 单字段排序</h4><p>默认排序是由低到高，但是实际生产中一般使用由高到低。(升序是ASC，降序是DESC)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">order</span> <span class="keyword">by</span> 字段名 <span class="keyword">ASC</span><span class="operator">/</span><span class="keyword">DESC</span>；</span><br></pre></td></tr></table></figure>
<h4 id="10-5-2-多字段排序"><a href="#10-5-2-多字段排序" class="headerlink" title="10.5.2 多字段排序"></a>10.5.2 多字段排序</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">order</span> <span class="keyword">by</span> 字段名<span class="number">1</span> <span class="keyword">ASC</span><span class="operator">/</span><span class="keyword">DESC</span>，字段名<span class="number">2</span> <span class="keyword">ASC</span><span class="operator">/</span><span class="keyword">DESC</span>；</span><br></pre></td></tr></table></figure>
<p>例：查询t_shop表中的sale_num 和 sale_price字段，先按照sale_num排序，然后再按照sale_price排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sale_num,sale_price <span class="keyword">from</span> t_shop <span class="keyword">as</span> t <span class="keyword">order</span> <span class="keyword">by</span> sale_num,sale_price；<span class="operator">/</span><span class="operator">/</span>从左到右依次排序，左边相同则排右边</span><br></pre></td></tr></table></figure>
<h3 id="10-6-范围查询-between-…-and-…"><a href="#10-6-范围查询-between-…-and-…" class="headerlink" title="10.6 范围查询(between … and …)"></a>10.6 范围查询(between … and …)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段名 <span class="keyword">between</span> &quot;xxx&quot; <span class="keyword">and</span> &quot;xxx&quot;；</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>网安行业介绍</title>
    <url>/2023/04/23/%E7%BD%91%E5%AE%89%E7%9B%B8%E5%85%B3%E6%9C%AF%E8%AF%AD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>黑客的概念</h1>

<p>什么是黑客？就是极度热爱技术(编程爱好者、运维、测试、开发)崇尚技术、程序员(资深)、网络管理员、学生、极度追求硬件的这种极客。骨灰级玩家! !</p>
<ul>
<li>白帽子：在法律允许范围内，利用合法的手段进行系统的渗透，测试等，这一群人就是白帽子也就是我们。</li>
<li>灰帽子：介于白帽子，黑帽子之间的，亦正亦邪，盗亦有道的这么一群人。</li>
<li>黑帽子：也是就是骇客，一般指有破坏性，攻击性，为了达到目的不择手段的这么一群人。主要破坏计算机系统，破坏网络， 盗号， DDos等等</li>
<li>红帽子：愤青， 有正义感！中美，中日，中菲等黑客大战的参与者。</li>
</ul>
<h2>黑客守则</h2>

<p>黑客守则是网络黑客领域约定俗成的行为规则。其中包括不得修改系统文件, 如果为了隐藏自己的侵入而作的修改则不在此限， 但仍须维持原来系统的安全性， 不得因得到系统的控制权而破坏原有的安全性。具体条例：</p>
<ol>
<li>不要恶意的破坏任何系统。恶意的破坏他人的软件或者服务器将要承担法律责任。千万不要破坏别人的文件或数据! ! ! !</li>
<li>不要修改任何的系统文件，如果你是为了进入而修改它。当你达到目的以后，需要将它进行还原(恢复)到原来的状态。</li>
<li>不要轻易的将你Hack的站点、App的用户名和密码告诉你不信任的人(任何人)。不要炫耀,容易出事! !技术不到家的人员， 给自己带来问题。作为安全从业人员，更不应该去泄露、分享这些数据。</li>
<li>不要在论坛上、暗网、群、讨论组等这些公共的场所去讨论你Hack掉的站点、App或手机等。</li>
<li>使用微信或POST文章的时候不要使用真实的名字。</li>
<li>入侵(渗透)成功进入他人主机的时候，不要轻易的离开电脑，离开了要锁屏! !</li>
<li>不要入侵或攻击电信运营商或政府的网站、以及服务器。</li>
<li>不要再电话里谈论任何关于你从事黑客的任何事情(录音)窃听。</li>
<li>将你的笔记本电脑、 PC、U盘、 移动硬盘等这些设备放置在安全的地方。比如安全公司的病毒样本、红队的常见的工具。武器级的工具! !</li>
<li>读遍有关与系统安全或系统漏洞的文件、复现、修复等。</li>
<li>已经进入了(入侵)别人的计算机(主机)，不要删改人家的账号。</li>
<li>不要将你已经破解的账号、网站、分享给你的朋友。</li>
<li>不会编程的黑客不是一 个好黑客，不会运维的黑客也不是一 个好黑客。全面发展! Go CC++ JavaScriptPHP SQL HTML CSS Python Shell Rust等</li>
<li>黑客不同于盗! ! !</li>
<li>不遵守法则的黑客! !不遵守黑客守则的黑客!谴责或惩罚!</li>
</ol>
<h1>信息安全系统</h1>

<h2>信息系统</h2>

<p>信息系统能进行信息(数据)的采集、传输、存储、加工、使用和维护的计算机应用系统。如：</p>
<ul>
<li>办公自动化系统</li>
<li>CRM/ERP</li>
<li>HRM</li>
<li>互联网上我们能看到的网站（淘宝，天猫，京东等等）</li>
</ul>
<h2>信息安全</h2>

<p>信息安全是指保护信息系统中的计算机硬件、软件、数据不因偶然或是恶意的原因而遭受到的破坏。防止信息的更改、防止信息被泄露、保障系统连续、可靠的正常运行。7 * 24的保证信息服务不中断。信息安全从狭义的角度来说是指保护信息系统的安全，主要目标包括保护信息系统的保密性(国企/事业单位/企业/金融/电信/航空/航天/能源/交通/军工)，保护他们的完整性和可靠性。</p>
<h1>网络安全行业相关术语</h1>

<h2>计算机病毒</h2>

<p>计算机病毒（Computer Virus）指编制者在计算机程序中插入的破坏计算机功能或者破坏数据，影响计算机正常使用并且能够自我复制的一组计算机指令或程序代码。计算机病毒具有传染性、隐蔽性、感染性、潜伏性、可激发性、表现性或破坏性。计算机病毒的生命周期：开发期→传染期→潜伏期→发作期→发现期→消化期→消亡期。（编程代码就是实现正常的需求，病毒就是实现特殊的需求。）比如：</p>
<ul>
<li>编程实现微信聊天或者传输文件等功能。 </li>
<li>病毒实现后台下载你的文件。</li>
</ul>
<h2>木马Horse</h2>

<p>什么是木马？木马是一种用来非法收集信息或控制另一台计算机的特定程序(恶意程序)。 通常这样的程序都是</p>
<ul>
<li>由服务端和客户端两部分组成。</li>
<li>木马里使用的技术比较多! 通过白名单加壳免杀等诱导你点击下载安装等形式，有技术含量的过程。</li>
<li>有一定社会工程学!如：火车站、飞机场、 地铁、酒店WIFI,如果没有计算机基础，免费WIFI。DNS劫持，</li>
<li>URL重定向。www.baidu.com ==&gt;页面上提示你下载App等等</li>
</ul>
<p>木马的特征：</p>
<ol>
<li>造成数据的损坏、被窃取</li>
<li>造成数据被篡改、修改</li>
<li>用户名、密码被盗、遗失</li>
<li>个人信息被泄露</li>
<li>个人的电子账户、资金</li>
<li>伪装成你跟家人、 朋友借钱</li>
</ol>
<h2>挖矿</h2>

<p>虛拟币的一种获取手段，挖矿本身指通过高算力的机器(服务器PC手机矿机)有基于CPU、GPU,提供计算的能力，通常一个矿机8块显卡12块显卡，去计算哈希值的过程。加密的数据，解密谁能第一个计算出来， 并且通知全网得到验证，谁就算挖到了这个区块，拥有这个区块的奖励——虚拟币!主要涉及到：</p>
<ul>
<li>矿池(管理矿 工提供任务 提供奖励矿工费用)</li>
<li>矿机(提供算力的设备)</li>
<li>矿工(挖矿的这个人 账户若干台矿机)</li>
<li>矿 (虚拟币)比特币ETH等</li>
<li>交易所(虚拟币) 比特币ETH等</li>
<li>主要利用挖矿木马去攻击高价值目标，服务器集群等。相关的黑色产业通过系统漏洞，中间件漏洞将木马植入到对应的系统中。</li>
</ul>
<h2>入侵</h2>

<p>入侵就是之计算机网络或系统的非授权的(拿到授权)访问行为。通常是恶意的存取信息、处理信息或者破坏<br>我们的计算机系统。目前有专门的IDS IPS入侵检测系统。</p>
<h2>攻击</h2>

<p>什么是攻击？指利用网络或计算机系统中存在的漏洞 比如：CVE-MS17-010和安全缺陷对其进行破坏。信息泄露、更改、或是使这个计算机丧失功能的行为。可以通过木马病毒漏洞等比如拒绝服务。</p>
<h2>漏洞</h2>

<p>什么是漏洞？指网络或系统中由硬件、软件、网络协议的具体实现(编写)或安全策略存在弱点或缺陷。操作系统Windows用一段时间打补丁SPI SP2 SP3, Unix 相对比较少Linux有但也少，Mac系统几乎没有。中间件软件，系统中安装的某些程序实现某些功能， 微信QQ MySQL Apache Nginx等。不同的版本存在着漏洞越权未授权访问等。程序员在开发的程序开发测试可能没有测试出来，黑客安全公司爆出漏洞，业务漏洞、逻辑表上的漏洞。漏洞出现的原因有很多，比如：</p>
<ol>
<li>开始设计阶段考虑不周到、不全面。</li>
<li>编码阶段(实现功能)出现漏洞</li>
<li>存在一些不合理的逻辑—&gt;代码审计—&gt;至少能审计70%</li>
</ol>
<h2>后门</h2>

<p>什么是后门？后门就是指绕过安全性控制而获得对系统、程序的访问权限的一种技术、应用程序、方法。</p>
<ul>
<li>后门是故意写好的存在你系统中，想办法存在你系统中，供某些人某些特殊的程序通过特殊的方法手段账号远程控制你的计算机。</li>
<li>后门和漏洞不一 样!漏洞不是有意的， 后门是有意而为之。故意的!可以是一些脚本、程序、服务等对应带来的危害可以有：勒索病毒，数据泄露，远程控制，挖矿，DDos等。</li>
<li>后门可以利用杀毒软件全面查杀，不要乱安装软件等，来防止后门产生的危害。</li>
</ul>
<h2>补丁</h2>

<p>什么是补丁？补丁就是指对操作系统、软件、服务在使用过程中暴露出的缺陷、问题、错误而发布的修补漏洞的程序。要明白有一些漏洞是可以修补的、有一些漏洞是无法进行修补（比如硬件设计方面造成的）。比如：</p>
<ul>
<li>软件提供商Windows出问题微软提供补丁</li>
<li>软件提供商MacOS出现苹果公司提供补丁</li>
</ul>
<h2>密码</h2>

<p>什么是密码？密码一种用户保护数据或信息的技术，通常我们说的密码指密码系统，它的基本功能实现信息的机密性的这样的一种服务。比如：</p>
<ul>
<li>去银行办一张卡存了多少钱 为了安全起见设置一个密码</li>
<li>设置密码的目的 合规性合法性保密性安全性等</li>
<li>密码系统有各种各样的加密方式明文123456混淆各种算法的算法越复杂这个密码强度就越高。不容易被人轻易的破解。包括使用密码的安全策略大小写、中英文、标点符号、数字密码、长度位数等。</li>
<li>密码学是高级网络安全阶段出现的一些技术。</li>
</ul>
<h2>加密</h2>

<p>什么是加密？就是指以某种特殊的算法，如MD5 AES WEP等各种改变原有的信息数据的变现形态。123456加密得到 asdfa332sdfsdafasdfsfggwwerw34233242将正常的形态(明文可以直接被我们读取)信息形态变为无法识别的信息的过程（混淆）。通过数据加密保护了数据安全性，系统安全性，用户安全性，即便获得了加密数据，依然无法正常的获取/了解里面的内容。</p>
<h2>解密</h2>

<p>什么是解密？加密和解密是成对出现的，解密就是加密的反过程，将加密以后的数据信息通过某种特定的算法，需要和你加密的时候采取的加密算法一致，12312dsafjsafjl;jljalfjdsiou02748197恢复变换为可以识别的信息的过程。比如变为 ：123456</p>
<h2>APT攻击</h2>

<p>什么是APT攻击？指的是黑客以求资料为目的，针对用户所发送的网络攻击和侵袭行为。是一种有组织、蓄谋已久的 “恶意的商业间谍行为、威胁”。这种行为往往是经过长期的经营和策划，并具备高度的隐蔽性。攻击手法、过程在于隐藏自己、针对特定的对象、进行长期、有计划、有组织的窃取数据。整个攻击的生命周期：</p>
<ul>
<li>第一阶段： 扫描探测</li>
<li>第二阶段： 工具投送</li>
<li>第三阶段： 漏洞利用</li>
<li>第四阶段： 木马植入</li>
<li>第五阶段： 远程控制</li>
<li>第六阶段： 横向渗透</li>
<li>第七阶段： 目标行动</li>
</ul>
<h2>0-day</h2>

<p>什么是0-day漏洞？就是只有你知道的一个漏洞。（或者是未公开的漏洞都叫0-day）</p>
<ul>
<li>0-day是网络安全技术中的一个术语， 特指被攻击者学握却未被软件厂商修复的系统漏洞。</li>
<li>0-day漏洞是攻击者入侵系统的终极武器，资深的黑客手里总会掌握几个功能强大的0-day漏洞。同时0-day</li>
<li>漏洞是木马、 病毒、间谍软件入侵系统的最有效途径。由于没有官方发布的安全补丁，攻击者可以利用0-</li>
<li>day对目标主机为所欲为，甚至在Internet. 上散布蠕虫。因此，0-day漏洞的技术资料通常非常敏感，往往被视为商业机密。</li>
<li>对于软件厂商和用户来说，0-day攻击是危害最大的一类攻击，针对0-day漏洞的缓冲区溢出攻击是对技术性要求最高的攻击方式。</li>
</ul>
<h2>1-day</h2>

<p>什么是1-day漏洞？就是系统或软件厂商刚刚发布某一个漏洞(没有超过一天，&lt;24小时)。<br>此外，微软的安全中心所公布的漏洞也是所有安全工作者和黑容们最感兴趣的地方。因为会有许多攻击者通宵达旦地去研究这些补丁patch了哪些漏洞，井写出exploit,因为在补丁刚刚发布的一段时间内，并非所有用户都能及时修复，故这种新公布的漏洞也有一定利用价值。有时把攻击这种刚刚被patch过的漏洞称为1-day攻击。</p>
<h2>n-day</h2>

<p>什么是n-day漏洞？就是系统或软件厂商刚刚发布某一个漏洞N天以内，并没有打补丁。</p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全守则</tag>
        <tag>网安相关术语</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2023/04/25/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>常用正则表达式</h1>

<h2>一、校验数字的表达式</h2>


<ul>
<li><span>数字：^[0-9]*$</span></li>
<li>n位的数字：^\d{n}$</li>
<li>至少n位的数字：^\d{n,}$</li>
<li>m-n位的数字：^\d{m,n}$</li>
<li>零和非零开头的数字：^(0|[1-9][0-9]*)$</li>
<li>非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$</li>
<li>带1-2位小数的正数或负数：^(-)?\d+(.\d{1,2})$</li>
<li>正数、负数、和小数：^(-|+)?\d+(.\d+)?$</li>
<li>有两位小数的正实数：^[0-9]+(.[0-9]{2})?$</li>
<li>有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$</li>
<li>非零的正整数：^[1-9]\d<em>$ 或 ^([1-9][0-9]</em>){1,3}$ 或 ^+?[1-9][0-9]*$</li>
<li>非零的负整数：^-[1-9][]0-9”<em>$ 或 ^-[1-9]\d</em>$</li>
<li>非负整数：^\d+$ 或 ^[1-9]\d*|0$</li>
<li>非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</li>
<li>非负浮点数：^\d+(.\d+)?$ 或 ^[1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>|0?.0+|0$</li>
<li>非正浮点数：^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>))|0?.0+|0$</li>
<li>正浮点数：^[1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>$ 或 ^(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]</em>.[0-9]+)|([0-9]<em>[1-9][0-9]</em>))$</li>
<li>负浮点数：^-([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>)$ 或 ^(-(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]</em>.[0-9]+)|([0-9]<em>[1-9][0-9]</em>)))$</li>
<li>浮点数：^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>|0?.0+|0)$</li>
</ul>
<h2> 二、校验字符的表达式</h2>

<ul>
<li>汉字：^[\u4e00-\u9fa5]{0,}$</li>
<li>英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</li>
<li>长度为3-20的所有字符：^.{3,20}$</li>
<li>由26个英文字母组成的字符串：^[A-Za-z]+$</li>
<li>由26个大写英文字母组成的字符串：^[A-Z]+$</li>
<li>由26个小写英文字母组成的字符串：^[a-z]+$</li>
<li>由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$</li>
<li>由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w{3,20}$</li>
<li>中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</li>
<li>中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</li>
<li>可以输入含有^%&amp;’,;=?$\”等字符：<sup><a href="#fn_%&',;=?$\x22" id="reffn_%&',;=?$\x22">%&',;=?$\x22</a></sup>+</li>
<li>禁止输入含有~的字符：<sup><a href="#fn_~" id="reffn_~">~</a></sup>+</li>
</ul>
<h2>三、特殊需求表达式</h2>

<ul>
<li>Email地址：^\w+([-+.]\w+)<em>@\w+([-.]\w+)</em>.\w+([-.]\w+)*$</li>
<li>域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+.?</li>
<li>InternetURL：[a-zA-z]+://<sup><a href="#fn_\s" id="reffn_\s">\s</a></sup><em> 或 ^<a href="http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=">http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=</a>]</em>)?$</li>
<li>手机号码：^(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])\d{8}$</li>
<li>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</li>
<li>国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7}</li>
<li>电话号码正则表达式（支持手机号码，3-4位区号，7-8位直播号码，1－4位分机号）: ((\d{11})|^((\d{7,8})|(\d{4}|\d{3})-(\d{7,8})|(\d{4}|\d{3})-(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1})|(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1}))$)</li>
<li>身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X：(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)</li>
<li>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$</li>
<li>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$</li>
<li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：^(?=.<em>\d)(?=.</em>[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,10}$</li>
<li>强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)：^(?=.<em>\d)(?=.</em>[a-z])(?=.*[A-Z]).{8,10}$</li>
<li>日期格式：^\d{4}-\d{1,2}-\d{1,2}</li>
<li>一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</li>
<li>一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$</li>
<li>钱的输入格式：</li>
</ul>
<ol>
<li>有四种钱的表示形式我们可以接受:"10000.00" 和 "10,000.00", 和没有 "分" 的 "10000" 和 "10,000"：^[1-9][0-9]*$</li>
<li>这表示任意一个不以0开头的数字,但是,这也意味着一个字符"0"不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$</li>
<li>一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$</li>
<li>这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧。下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$</li>
<li>必须说明的是,小数点后面至少应该有1位数,所以"10."是不通过的,但是 "10" 和 "10.2" 是通过的：^[0-9]+(.[0-9]{2})?$</li>
<li>这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$</li>
<li>这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</li>
<li>1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</li>
<li>备注：这就是最终结果了,别忘了"+"可以用"*"替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</li>
</ol>

<ul>
<li>xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</li>
<li>中文字符的正则表达式：[\u4e00-\u9fa5]</li>
<li>双字节字符：<sup><a href="#fn_\x00-\xff" id="reffn_\x00-\xff">\x00-\xff</a></sup> (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</li>
<li>空白行的正则表达式：\n\s*\r (可以用来删除空白行)</li>
<li>HTML标记的正则表达式：&lt;(\S<em>?)<sup><a href="#fn_>" id="reffn_>">></a></sup></em>&gt;.<em>?|&lt;.</em>? /&gt; ( 首尾空白字符的正则表达式：^\s<em>|\s</em>$或(^\s<em>)|(\s</em>$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</li>
<li>腾讯QQ号：[1-9][0-9]{4,} (腾讯QQ号从10000开始)</li>
<li>中国邮政编码：[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)</li>
<li>IPv4地址：((2(5[0-5]|[0-4]\d))|[0-1]?\d{1,2})(.((2(5[0-5]|[0-4]\d))|[0-1]?\d{1,2})){3}</li>
</ul>
]]></content>
      <categories>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
</search>
